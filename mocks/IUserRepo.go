// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/fahmyabida/eDot/internal/app/domain"
	mock "github.com/stretchr/testify/mock"
)

// IUserRepo is an autogenerated mock type for the IUserRepo type
type IUserRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, user
func (_m *IUserRepo) Create(ctx context.Context, user *domain.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByEmailOrPhoneNumber provides a mock function with given fields: ctx, username, phoneNumber
func (_m *IUserRepo) FindByEmailOrPhoneNumber(ctx context.Context, username string, phoneNumber string) (domain.User, error) {
	ret := _m.Called(ctx, username, phoneNumber)

	if len(ret) == 0 {
		panic("no return value specified for FindByEmailOrPhoneNumber")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (domain.User, error)); ok {
		return rf(ctx, username, phoneNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) domain.User); ok {
		r0 = rf(ctx, username, phoneNumber)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, phoneNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIUserRepo creates a new instance of IUserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserRepo {
	mock := &IUserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
