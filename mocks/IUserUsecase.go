// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/fahmyabida/eDot/internal/app/domain"
	mock "github.com/stretchr/testify/mock"
)

// IUserUsecase is an autogenerated mock type for the IUserUsecase type
type IUserUsecase struct {
	mock.Mock
}

// Login provides a mock function with given fields: ctx, payload
func (_m *IUserUsecase) Login(ctx context.Context, payload *domain.UserLoginRequest) (domain.UserLoginResponse, error) {
	ret := _m.Called(ctx, payload)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 domain.UserLoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.UserLoginRequest) (domain.UserLoginResponse, error)); ok {
		return rf(ctx, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.UserLoginRequest) domain.UserLoginResponse); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Get(0).(domain.UserLoginResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.UserLoginRequest) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, payload
func (_m *IUserUsecase) Register(ctx context.Context, payload *domain.User) error {
	ret := _m.Called(ctx, payload)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) error); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIUserUsecase creates a new instance of IUserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserUsecase {
	mock := &IUserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
